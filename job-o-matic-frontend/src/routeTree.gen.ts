/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CompaniesIndexRouteImport } from './routes/companies/index'
import { Route as ApplicationsIndexRouteImport } from './routes/applications/index'
import { Route as CompaniesCompanyIdRouteImport } from './routes/companies/$companyId'
import { Route as ApplicationsApplicationIdRouteImport } from './routes/applications/$applicationId'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CompaniesIndexRoute = CompaniesIndexRouteImport.update({
  id: '/companies/',
  path: '/companies/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApplicationsIndexRoute = ApplicationsIndexRouteImport.update({
  id: '/applications/',
  path: '/applications/',
  getParentRoute: () => rootRouteImport,
} as any)
const CompaniesCompanyIdRoute = CompaniesCompanyIdRouteImport.update({
  id: '/companies/$companyId',
  path: '/companies/$companyId',
  getParentRoute: () => rootRouteImport,
} as any)
const ApplicationsApplicationIdRoute =
  ApplicationsApplicationIdRouteImport.update({
    id: '/applications/$applicationId',
    path: '/applications/$applicationId',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/applications/$applicationId': typeof ApplicationsApplicationIdRoute
  '/companies/$companyId': typeof CompaniesCompanyIdRoute
  '/applications': typeof ApplicationsIndexRoute
  '/companies': typeof CompaniesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/applications/$applicationId': typeof ApplicationsApplicationIdRoute
  '/companies/$companyId': typeof CompaniesCompanyIdRoute
  '/applications': typeof ApplicationsIndexRoute
  '/companies': typeof CompaniesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/applications/$applicationId': typeof ApplicationsApplicationIdRoute
  '/companies/$companyId': typeof CompaniesCompanyIdRoute
  '/applications/': typeof ApplicationsIndexRoute
  '/companies/': typeof CompaniesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/applications/$applicationId'
    | '/companies/$companyId'
    | '/applications'
    | '/companies'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/applications/$applicationId'
    | '/companies/$companyId'
    | '/applications'
    | '/companies'
  id:
    | '__root__'
    | '/'
    | '/applications/$applicationId'
    | '/companies/$companyId'
    | '/applications/'
    | '/companies/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ApplicationsApplicationIdRoute: typeof ApplicationsApplicationIdRoute
  CompaniesCompanyIdRoute: typeof CompaniesCompanyIdRoute
  ApplicationsIndexRoute: typeof ApplicationsIndexRoute
  CompaniesIndexRoute: typeof CompaniesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/companies/': {
      id: '/companies/'
      path: '/companies'
      fullPath: '/companies'
      preLoaderRoute: typeof CompaniesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/applications/': {
      id: '/applications/'
      path: '/applications'
      fullPath: '/applications'
      preLoaderRoute: typeof ApplicationsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/companies/$companyId': {
      id: '/companies/$companyId'
      path: '/companies/$companyId'
      fullPath: '/companies/$companyId'
      preLoaderRoute: typeof CompaniesCompanyIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/applications/$applicationId': {
      id: '/applications/$applicationId'
      path: '/applications/$applicationId'
      fullPath: '/applications/$applicationId'
      preLoaderRoute: typeof ApplicationsApplicationIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ApplicationsApplicationIdRoute: ApplicationsApplicationIdRoute,
  CompaniesCompanyIdRoute: CompaniesCompanyIdRoute,
  ApplicationsIndexRoute: ApplicationsIndexRoute,
  CompaniesIndexRoute: CompaniesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
